// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: calc.flex


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\3\22\0\1\1\1\4"+
    "\6\0\4\5\1\0\1\5\1\6\1\5\12\7\1\0"+
    "\1\5\1\10\1\11\1\12\2\0\32\13\3\0\1\5"+
    "\2\0\3\13\1\14\1\15\1\16\1\13\1\17\1\20"+
    "\2\13\1\21\1\13\1\22\1\13\1\23\1\13\1\24"+
    "\1\25\1\26\2\13\1\27\3\13\1\5\1\0\1\5"+
    "\54\0\1\13\12\0\1\13\4\0\1\13\5\0\27\13"+
    "\1\0\37\13\1\0\u01ca\13\4\0\14\13\16\0\5\13"+
    "\7\0\1\13\1\0\1\13\201\0\5\13\1\0\2\13"+
    "\2\0\4\13\1\0\1\13\6\0\1\13\1\0\3\13"+
    "\1\0\1\13\1\0\24\13\1\0\123\13\1\0\213\13"+
    "\10\0\246\13\1\0\46\13\2\0\1\13\6\0\51\13"+
    "\107\0\33\13\4\0\4\13\55\0\53\13\25\0\12\7"+
    "\4\0\2\13\1\0\143\13\1\0\1\13\17\0\2\13"+
    "\7\0\2\13\12\7\3\13\2\0\1\13\20\0\1\13"+
    "\1\0\36\13\35\0\131\13\13\0\1\13\16\0\12\7"+
    "\41\13\11\0\2\13\4\0\1\13\5\0\26\13\4\0"+
    "\1\13\11\0\1\13\3\0\1\13\27\0\31\13\7\0"+
    "\13\13\65\0\25\13\1\0\10\13\106\0\66\13\3\0"+
    "\1\13\22\0\1\13\7\0\12\13\4\0\12\7\1\0"+
    "\20\13\4\0\10\13\2\0\2\13\2\0\26\13\1\0"+
    "\7\13\1\0\1\13\3\0\4\13\3\0\1\13\20\0"+
    "\1\13\15\0\2\13\1\0\3\13\4\0\12\7\2\13"+
    "\12\0\1\13\10\0\6\13\4\0\2\13\2\0\26\13"+
    "\1\0\7\13\1\0\2\13\1\0\2\13\1\0\2\13"+
    "\37\0\4\13\1\0\1\13\7\0\12\7\2\0\3\13"+
    "\20\0\11\13\1\0\3\13\1\0\26\13\1\0\7\13"+
    "\1\0\2\13\1\0\5\13\3\0\1\13\22\0\1\13"+
    "\17\0\2\13\4\0\12\7\11\0\1\13\13\0\10\13"+
    "\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\5\13\3\0\1\13\36\0\2\13\1\0\3\13"+
    "\4\0\12\7\1\0\1\13\21\0\1\13\1\0\6\13"+
    "\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13"+
    "\1\0\2\13\3\0\2\13\3\0\3\13\3\0\14\13"+
    "\26\0\1\13\25\0\12\7\25\0\10\13\1\0\3\13"+
    "\1\0\27\13\1\0\20\13\3\0\1\13\32\0\3\13"+
    "\5\0\2\13\4\0\12\7\20\0\1\13\4\0\10\13"+
    "\1\0\3\13\1\0\27\13\1\0\12\13\1\0\5\13"+
    "\3\0\1\13\40\0\1\13\1\0\2\13\4\0\12\7"+
    "\1\0\2\13\22\0\10\13\1\0\3\13\1\0\51\13"+
    "\2\0\1\13\20\0\1\13\5\0\3\13\10\0\3\13"+
    "\4\0\12\7\12\0\6\13\5\0\22\13\3\0\30\13"+
    "\1\0\11\13\1\0\1\13\2\0\7\13\37\0\12\7"+
    "\21\0\60\13\1\0\2\13\14\0\7\13\11\0\12\7"+
    "\47\0\2\13\1\0\1\13\1\0\5\13\1\0\30\13"+
    "\1\0\1\13\1\0\12\13\1\0\2\13\11\0\1\13"+
    "\2\0\5\13\1\0\1\13\11\0\12\7\2\0\4\13"+
    "\40\0\1\13\37\0\12\7\26\0\10\13\1\0\44\13"+
    "\33\0\5\13\163\0\53\13\24\0\1\13\12\7\6\0"+
    "\6\13\4\0\4\13\3\0\1\13\3\0\2\13\7\0"+
    "\3\13\4\0\15\13\14\0\1\13\1\0\12\7\6\0"+
    "\46\13\1\0\1\13\5\0\1\13\2\0\53\13\1\0"+
    "\115\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0"+
    "\4\13\2\0\51\13\1\0\4\13\2\0\41\13\1\0"+
    "\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0"+
    "\17\13\1\0\71\13\1\0\4\13\2\0\103\13\45\0"+
    "\20\13\20\0\126\13\2\0\6\13\3\0\u016c\13\2\0"+
    "\21\13\1\0\32\13\5\0\113\13\6\0\10\13\7\0"+
    "\15\13\1\0\4\13\16\0\22\13\16\0\22\13\16\0"+
    "\15\13\1\0\3\13\17\0\64\13\43\0\1\13\4\0"+
    "\1\13\3\0\12\7\46\0\12\7\6\0\131\13\7\0"+
    "\5\13\2\0\42\13\1\0\1\13\5\0\106\13\12\0"+
    "\37\13\47\0\12\7\36\13\2\0\5\13\13\0\54\13"+
    "\4\0\32\13\6\0\12\7\46\0\27\13\11\0\65\13"+
    "\53\0\12\7\6\0\12\7\15\0\1\13\135\0\57\13"+
    "\21\0\7\13\4\0\12\7\51\0\36\13\15\0\2\13"+
    "\12\7\54\13\32\0\44\13\34\0\12\7\3\0\3\13"+
    "\12\7\44\13\2\0\11\13\7\0\53\13\2\0\3\13"+
    "\51\0\4\13\1\0\6\13\1\0\2\13\3\0\1\13"+
    "\5\0\300\13\100\0\26\13\2\0\6\13\2\0\46\13"+
    "\2\0\6\13\2\0\10\13\1\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\37\13\2\0\65\13\1\0\7\13"+
    "\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13"+
    "\2\0\6\13\4\0\15\13\5\0\3\13\1\0\7\13"+
    "\164\0\1\13\15\0\1\13\20\0\15\13\145\0\1\13"+
    "\4\0\1\13\2\0\12\13\1\0\1\13\3\0\5\13"+
    "\6\0\1\13\1\0\1\13\1\0\1\13\1\0\4\13"+
    "\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13"+
    "\64\0\2\13\u017b\0\57\13\1\0\57\13\1\0\205\13"+
    "\6\0\4\13\3\0\2\13\14\0\46\13\1\0\1\13"+
    "\5\0\1\13\2\0\70\13\7\0\1\13\20\0\27\13"+
    "\11\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13"+
    "\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13"+
    "\120\0\1\13\325\0\2\13\52\0\5\13\5\0\2\13"+
    "\4\0\126\13\6\0\3\13\1\0\132\13\1\0\4\13"+
    "\5\0\53\13\1\0\136\13\21\0\33\13\65\0\306\13"+
    "\112\0\360\13\20\0\215\13\103\0\56\13\2\0\15\13"+
    "\3\0\20\13\12\7\2\13\24\0\57\13\20\0\37\13"+
    "\2\0\106\13\61\0\11\13\2\0\147\13\2\0\65\13"+
    "\2\0\5\13\60\0\13\13\1\0\3\13\1\0\4\13"+
    "\1\0\27\13\35\0\64\13\16\0\62\13\34\0\12\7"+
    "\30\0\6\13\3\0\1\13\1\0\2\13\1\0\12\7"+
    "\34\13\12\0\27\13\31\0\35\13\7\0\57\13\34\0"+
    "\1\13\12\7\6\0\5\13\1\0\12\13\12\7\5\13"+
    "\1\0\51\13\27\0\3\13\1\0\10\13\4\0\12\7"+
    "\6\0\27\13\3\0\1\13\3\0\62\13\1\0\1\13"+
    "\3\0\2\13\2\0\5\13\2\0\1\13\1\0\1\13"+
    "\30\0\3\13\2\0\13\13\7\0\3\13\14\0\6\13"+
    "\2\0\6\13\2\0\6\13\11\0\7\13\1\0\7\13"+
    "\1\0\53\13\1\0\14\13\10\0\163\13\15\0\12\7"+
    "\6\0\244\13\14\0\27\13\4\0\61\13\4\0\156\13"+
    "\2\0\152\13\46\0\7\13\14\0\5\13\5\0\1\13"+
    "\1\0\12\13\1\0\15\13\1\0\5\13\1\0\1\13"+
    "\1\0\2\13\1\0\2\13\1\0\154\13\41\0\153\13"+
    "\22\0\100\13\2\0\66\13\50\0\14\13\164\0\5\13"+
    "\1\0\207\13\23\0\12\7\7\0\32\13\6\0\32\13"+
    "\13\0\131\13\3\0\6\13\2\0\6\13\2\0\6\13"+
    "\2\0\3\13\43\0\14\13\1\0\32\13\1\0\23\13"+
    "\1\0\2\13\1\0\17\13\2\0\16\13\42\0\173\13"+
    "\205\0\35\13\3\0\61\13\57\0\40\13\15\0\24\13"+
    "\1\0\10\13\6\0\46\13\12\0\36\13\2\0\44\13"+
    "\4\0\10\13\60\0\236\13\2\0\12\7\6\0\44\13"+
    "\4\0\44\13\4\0\50\13\10\0\64\13\234\0\67\13"+
    "\11\0\26\13\12\0\10\13\230\0\6\13\2\0\1\13"+
    "\1\0\54\13\1\0\2\13\3\0\1\13\2\0\27\13"+
    "\12\0\27\13\11\0\37\13\101\0\23\13\1\0\2\13"+
    "\12\0\26\13\12\0\32\13\106\0\70\13\6\0\2\13"+
    "\100\0\1\13\17\0\4\13\1\0\3\13\1\0\35\13"+
    "\52\0\35\13\3\0\35\13\43\0\10\13\1\0\34\13"+
    "\33\0\66\13\12\0\26\13\12\0\23\13\15\0\22\13"+
    "\156\0\111\13\67\0\63\13\15\0\63\13\15\0\44\13"+
    "\14\0\12\7\306\0\35\13\12\0\1\13\10\0\26\13"+
    "\232\0\27\13\14\0\65\13\56\0\12\7\23\0\55\13"+
    "\40\0\31\13\7\0\12\7\11\0\44\13\17\0\12\7"+
    "\4\0\1\13\13\0\43\13\3\0\1\13\14\0\60\13"+
    "\16\0\4\13\13\0\12\7\1\13\1\0\1\13\43\0"+
    "\22\13\1\0\31\13\124\0\7\13\1\0\1\13\1\0"+
    "\4\13\1\0\17\13\1\0\12\13\7\0\57\13\21\0"+
    "\12\7\13\0\10\13\2\0\2\13\2\0\26\13\1\0"+
    "\7\13\1\0\2\13\1\0\5\13\3\0\1\13\22\0"+
    "\1\13\14\0\5\13\236\0\65\13\22\0\4\13\5\0"+
    "\12\7\5\0\1\13\40\0\60\13\24\0\2\13\1\0"+
    "\1\13\10\0\12\7\246\0\57\13\51\0\4\13\44\0"+
    "\60\13\24\0\1\13\13\0\12\7\46\0\53\13\15\0"+
    "\1\13\7\0\12\7\66\0\33\13\25\0\12\7\306\0"+
    "\54\13\164\0\100\13\12\7\25\0\1\13\240\0\10\13"+
    "\2\0\47\13\20\0\1\13\1\0\1\13\34\0\1\13"+
    "\12\0\50\13\7\0\1\13\25\0\1\13\13\0\56\13"+
    "\23\0\1\13\42\0\71\13\7\0\11\13\1\0\45\13"+
    "\21\0\1\13\17\0\12\7\30\0\36\13\160\0\7\13"+
    "\1\0\2\13\1\0\46\13\25\0\1\13\11\0\12\7"+
    "\6\0\6\13\1\0\2\13\1\0\40\13\16\0\1\13"+
    "\7\0\12\7\u0136\0\23\13\15\0\232\13\346\0\304\13"+
    "\274\0\57\13\321\0\107\13\271\0\71\13\7\0\37\13"+
    "\1\0\12\7\146\0\36\13\22\0\60\13\20\0\4\13"+
    "\14\0\12\7\11\0\25\13\5\0\23\13\260\0\100\13"+
    "\200\0\113\13\5\0\1\13\102\0\15\13\100\0\2\13"+
    "\1\0\1\13\34\0\370\13\10\0\363\13\15\0\37\13"+
    "\61\0\3\13\21\0\4\13\10\0\u018c\13\4\0\153\13"+
    "\5\0\15\13\3\0\11\13\7\0\12\13\146\0\125\13"+
    "\1\0\107\13\1\0\2\13\2\0\1\13\2\0\2\13"+
    "\2\0\4\13\1\0\14\13\1\0\1\13\1\0\7\13"+
    "\1\0\101\13\1\0\4\13\2\0\10\13\1\0\7\13"+
    "\1\0\34\13\1\0\4\13\1\0\5\13\1\0\1\13"+
    "\3\0\7\13\1\0\u0154\13\2\0\31\13\1\0\31\13"+
    "\1\0\37\13\1\0\31\13\1\0\37\13\1\0\31\13"+
    "\1\0\37\13\1\0\31\13\1\0\37\13\1\0\31\13"+
    "\1\0\10\13\2\0\62\7\55\13\12\0\7\13\2\0"+
    "\12\7\4\0\1\13\u0171\0\54\13\4\0\12\7\6\0"+
    "\305\13\73\0\104\13\7\0\1\13\4\0\12\7\246\0"+
    "\4\13\1\0\33\13\1\0\2\13\1\0\1\13\2\0"+
    "\1\13\1\0\12\13\1\0\4\13\1\0\1\13\1\0"+
    "\1\13\6\0\1\13\4\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\3\13\1\0\2\13\1\0\1\13\2\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\2\0\4\13\1\0"+
    "\7\13\1\0\4\13\1\0\4\13\1\0\1\13\1\0"+
    "\12\13\1\0\21\13\5\0\3\13\1\0\5\13\1\0"+
    "\21\13\104\0\327\13\51\0\65\13\13\0\336\13\2\0"+
    "\u0182\13\16\0\u0131\13\37\0\36\13\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\1\1\4\1\5\3\4"+
    "\6\6\1\7\1\0\1\10\1\11\1\12\2\6\1\13"+
    "\2\6\1\5\5\6\1\14\3\6\1\15\1\16\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\30\0\110\0\140\0\30\0\170"+
    "\0\220\0\250\0\300\0\330\0\360\0\u0108\0\u0120\0\u0138"+
    "\0\u0150\0\30\0\u0168\0\30\0\30\0\30\0\u0180\0\u0198"+
    "\0\330\0\u01b0\0\u01c8\0\u0168\0\u01e0\0\u01f8\0\u0210\0\u0228"+
    "\0\u0240\0\330\0\u0258\0\u0270\0\u0288\0\330\0\330\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\2\14\1\17"+
    "\2\14\1\20\3\14\1\21\31\0\1\3\30\0\1\4"+
    "\36\0\1\22\24\0\1\23\1\10\31\0\1\24\27\0"+
    "\1\25\27\0\1\26\25\0\1\14\3\0\15\14\7\0"+
    "\1\14\3\0\2\14\1\27\12\14\7\0\1\14\3\0"+
    "\6\14\1\30\6\14\7\0\1\14\3\0\3\14\1\31"+
    "\11\14\7\0\1\14\3\0\11\14\1\32\3\14\7\0"+
    "\1\14\3\0\4\14\1\33\10\14\7\0\1\34\27\0"+
    "\1\14\3\0\3\14\1\35\11\14\7\0\1\14\3\0"+
    "\12\14\1\36\2\14\7\0\1\14\3\0\5\14\1\37"+
    "\7\14\7\0\1\14\3\0\5\14\1\40\7\14\7\0"+
    "\1\14\3\0\5\14\1\41\7\14\7\0\1\14\3\0"+
    "\2\14\1\42\12\14\7\0\1\14\3\0\7\14\1\43"+
    "\5\14\7\0\1\14\3\0\6\14\1\44\6\14\7\0"+
    "\1\14\3\0\7\14\1\45\5\14\7\0\1\14\3\0"+
    "\13\14\1\46\1\14\7\0\1\14\3\0\2\14\1\47"+
    "\12\14\7\0\1\14\3\0\2\14\1\50\12\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[672];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\12\1\1\11"+
    "\1\0\3\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[40];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private Parser yyparser;

  public Yylex(java.io.Reader r, Parser yyparser) {
    this(r);
    this.yyparser = yyparser;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return 0; }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error: unexpected character '"+yytext()+"'"); return -1;
            }
            // fall through
          case 16: break;
          case 2:
            { 
            }
            // fall through
          case 17: break;
          case 3:
            { return Parser.NL;
            }
            // fall through
          case 18: break;
          case 4:
            { return (int) yycharat(0);
            }
            // fall through
          case 19: break;
          case 5:
            { yyparser.yylval = new ParserVal(Double.parseDouble(yytext()));
         return Parser.NUM;
            }
            // fall through
          case 20: break;
          case 6:
            { yyparser.yylval = new ParserVal(yytext());
         return Parser.IDENT;
            }
            // fall through
          case 21: break;
          case 7:
            { return Parser.NOTEQUAL;
            }
            // fall through
          case 22: break;
          case 8:
            { return Parser.HIGHEQ;
            }
            // fall through
          case 23: break;
          case 9:
            { return Parser.EQUAL;
            }
            // fall through
          case 24: break;
          case 10:
            { return Parser.LESSEQ;
            }
            // fall through
          case 25: break;
          case 11:
            { return Parser.IF;
            }
            // fall through
          case 26: break;
          case 12:
            { return Parser.ELSE;
            }
            // fall through
          case 27: break;
          case 13:
            { return Parser.PRINT;
            }
            // fall through
          case 28: break;
          case 14:
            { return Parser.WHILE;
            }
            // fall through
          case 29: break;
          case 15:
            { return Parser.DEFINE;
            }
            // fall through
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
